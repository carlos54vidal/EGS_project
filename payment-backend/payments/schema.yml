openapi: 3.0.3
info:
  title: Payments API
  version: 1.0.0
  description: API for Payments
paths:
  /payments/:
    get:
      operationId: payments_list
      tags:
      - payments
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payments'
          description: ''
    post:
      operationId: payments_create
      tags:
      - payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Payments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Payments'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
          description: ''
  /payments/{id}/:
    get:
      operationId: payments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this payments.
        required: true
      tags:
      - payments
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
          description: ''
    put:
      operationId: payments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this payments.
        required: true
      tags:
      - payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Payments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Payments'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
          description: ''
    patch:
      operationId: payments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this payments.
        required: true
      tags:
      - payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPayments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPayments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPayments'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
          description: ''
    delete:
      operationId: payments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this payments.
        required: true
      tags:
      - payments
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /registration/:
    get:
      operationId: registration_retrieve
      tags:
      - registration
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clients'
          description: ''
    post:
      operationId: registration_create
      tags:
      - registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clients'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Clients'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Clients'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clients'
          description: ''
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    Clients:
      type: object
      properties:
        name:
          type: string
          maxLength: 300
        email:
          type: string
          format: email
          maxLength: 254
        membership_plan:
          $ref: '#/components/schemas/MembershipPlanEnum'
        unique_key:
          type: string
          format: uuid
        state:
          $ref: '#/components/schemas/StateEnum'
      required:
      - email
      - membership_plan
      - name
    MembershipPlanEnum:
      enum:
      - a
      - b
      - c
      type: string
      description: |-
        * `a` - Standard
        * `b` - Premium
        * `c` - Premium Plus
    PatchedPayments:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        client_unique_key:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 120
        type:
          oneOf:
          - $ref: '#/components/schemas/TypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        paid:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    Payments:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        client_unique_key:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 120
        type:
          oneOf:
          - $ref: '#/components/schemas/TypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        paid:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount
      - created_at
      - id
      - name
      - updated_at
    StateEnum:
      enum:
      - a
      - i
      - s
      - w
      type: string
      description: |-
        * `a` - Active
        * `i` - Inactive
        * `s` - Suspended
        * `w` - Awaiting Approval
    TypeEnum:
      enum:
      - CC
      - P
      - O
      type: string
      description: |-
        * `CC` - Credit Card
        * `P` - Paypal
        * `O` - Others
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
