####################### Payments 
---
## Payment-app deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payments
  namespace: egs-petcare
spec:
  replicas: 1
  selector:
    matchLabels:
      app: payments
  template:
    metadata:
      labels:
        app: payments
    spec:
      containers:
        - name: payments
          image: registry.deti/egs-petcare/payments:v1
          env:
            - name: DJANGO_SUPERUSER_USERNAME
              value: admin
            - name: DJANGO_SUPERUSER_EMAIL
              value: admin@example.com
            - name: DJANGO_SUPERUSER_PASSWORD
              value: admin
          resources:
            requests:
              memory: "32Mi"
              cpu: "10m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - containerPort: 8080
---
## Payment-app service
apiVersion: v1
kind: Service
metadata:
  name: payments
  namespace: egs-petcare
spec:
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  selector:
    app: payments
---
## Payment-db deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: paymentsdb
  namespace: egs-petcare
spec:
  replicas: 1
  selector:
    matchLabels:
      app: paymentsdb
  template:
    metadata:
      labels:
        app: paymentsdb
    spec:
      containers:
        - name: paymentsdb
          image: postgres:latest
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: paymentsdb
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: admin
          resources:
            requests:
              memory: "32Mi"
              cpu: "10m"
            limits:
              memory: "128Mi"
              cpu: "500m"
---
## Payment-db service
apiVersion: v1
kind: Service
metadata:
  name: paymentsdb
  namespace: egs-petcare
spec:
  selector:
    app: paymentsdb
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

################################### Bookings 

---
## Booking-app deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: booking-app
  namespace: egs-petcare
spec:
  replicas: 1
  selector:
    matchLabels:
      app: booking-app
  template:
    metadata:
      labels:
        app: booking-app
    spec:
      containers:
        - name: booking-app
          image: registry.deti/egs-petcare/booking-app:v1
          imagePullPolicy: Always # always pull the image from the container registry
          resources:
            requests:
              memory: '32Mi'
              cpu: '10m'
            limits:
              memory: '128Mi'
              cpu: '500m'
          ports:
            - containerPort: 8040
---
## Booking-app service
apiVersion: v1
kind: Service
metadata:
  name: booking-app
  namespace: egs-petcare
spec:
  ports:
    - port: 8040
      targetPort: 8040
  selector:
    app: booking-app
---
## Booking-db deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: booking-db
  namespace: egs-petcare
spec:
  replicas: 1
  selector:
    matchLabels:
      app: booking-db
  template:
    metadata:
      labels:
        app: booking-db
    spec:
      containers:
        - name: booking-db
          image: postgres:latest
          imagePullPolicy: Always # always pull the image from the container registry
          resources:
            requests:
              memory: '32Mi'
              cpu: '10m'
            limits:
              memory: '128Mi'
              cpu: '500m'
          ports:
            - containerPort: 5432
## Booking-db service
apiVersion: v1
kind: Service
metadata:
  name: booking-db
  namespace: egs-petcare
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: booking-db

############################################ NGINX 

# Create nginx deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: egs-petcare
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  strategy: {}
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - image: nginx:alpine
          name: nginx
          ports:
            - containerPort: 80
          resources: {}
          volumeMounts:
            - name: nginx-static
              mountPath: /var/www/static
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
      restartPolicy: Always
      volumes:
        - name: nginx-conf
          configMap:
            name: nginx-conf
            items:
               - key: nginx.conf
                 path: nginx.conf
        - name: nginx-static
          persistentVolumeClaim:
            claimName: nginx-static-pvc
# Create Service for nginx
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: egs-petcare
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: nginx

############################################## TRAEFIK

# Configure Traefik
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-k3s
  namespace: egs-petcare
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  ingressClassName: traefik
  rules:
    - host: app-egs-petcare.deti
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx
                port:
                  number: 80
