---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  namespace: egs-petcare
spec:
  replicas: 5
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
    spec:
      containers:
        - name: app
          image: registry.deti/egs-petcare/bookings:v1
          resources:
            requests:
              memory: '32Mi'
              cpu: '10m'
            limits:
              memory: '128Mi'
              cpu: '500m'
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: app
  namespace: prof
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: app
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-k3s
  namespace: egs-petcare
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: 'true'
spec:
  rules:
    - host: app-egs-petcare.k3s
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: app
                port:
                  number: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: egs-petcare
spec:
  replicas: 5
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:v1
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: root
            - name: POSTGRES_DB
              value: bookingservice
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgres/data
          resources:
            requests:
              memory: '32Mi'
              cpu: '10m'
            limits:
              memory: '128Mi'
              cpu: '500m'
          ports:
            - containerPort: 8080
      volumes:
        - name: postgresql-storage
          persistentVolumeClaim:
            claimName: postgresql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
